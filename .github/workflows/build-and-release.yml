name: Build and Release Desktop App
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for this release'
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    - name: Generate Release Notes
      id: generate_notes
      uses: release-drafter/release-drafter@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        config-name: release-drafter.yml
        version: ${{ github.event.inputs.version }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Desktop App Release ${{ github.event.inputs.version }}
        body: ${{ steps.generate_notes.outputs.body }}
        draft: false
        prerelease: false
  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: '*-x86_64.rpm'
            asset_name: 'Linux-RPM-x86_64'
          - os: ubuntu-latest
            artifact_name: '*-aarch64.rpm'
            asset_name: 'Linux-RPM-aarch64'
          - os: ubuntu-latest
            artifact_name: '*-amd64.AppImage'
            asset_name: 'Linux-AppImage-amd64'
          - os: ubuntu-latest
            artifact_name: '*-arm64.AppImage'
            asset_name: 'Linux-AppImage-arm64'
          - os: ubuntu-latest
            artifact_name: '*_amd64.deb'
            asset_name: 'Linux-DEB-amd64'
          - os: ubuntu-latest
            artifact_name: '*_arm64.deb'
            asset_name: 'Linux-DEB-arm64'
          - os: macos-latest
            artifact_name: '*-universal.dmg'
            asset_name: 'macOS-DMG-universal'
          - os: windows-latest
            artifact_name: '*-x64.msi'
            asset_name: 'Windows-MSI-x64'
          - os: windows-latest
            artifact_name: '*-ia32.msi'
            asset_name: 'Windows-MSI-x86'

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - name: Install dependencies
      run: npm ci
    - name: Build for current platform
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          npm run dist -- --linux deb rpm AppImage
        elif [ "${{ runner.os }}" == "macOS" ]; then
          npm run dist -- --mac dmg
        else
          npm run dist -- --win msi
        fi
    - name: List dist directory
      run: ls -R dist
    - name: Find artifact
      id: find_artifact
      shell: bash
      run: |
        ARTIFACT=$(find dist -name "${{ matrix.artifact_name }}" -print -quit)
        if [ -n "$ARTIFACT" ]; then
          echo "ARTIFACT_PATH=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "ARTIFACT_FOUND=true" >> $GITHUB_OUTPUT
        else
          echo "ARTIFACT_FOUND=false" >> $GITHUB_OUTPUT
        fi
    - name: Upload Release Asset
      if: steps.find_artifact.outputs.ARTIFACT_FOUND == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_artifact.outputs.ARTIFACT_PATH }}
        asset_name: ${{ matrix.asset_name }}${{ endsWith(matrix.artifact_name, '*') && '' || matrix.artifact_name }}
        asset_content_type: application/octet-stream

  update_release:
    needs: [create_release, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Update Release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const fs = require('fs');
          const releaseId = '${{ needs.create_release.outputs.release_id }}';
          const { data: release } = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId
          });
          const body = release.body + '\n\nBuild completed successfully.';
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId,
            body: body
          });
