name: Build and Release Desktop App
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for this release'
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    - name: Generate Release Notes
      id: generate_notes
      uses: release-drafter/release-drafter@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        config-name: release-drafter.yml
        version: ${{ github.event.inputs.version }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Desktop App Release ${{ github.event.inputs.version }}
        body: ${{ steps.generate_notes.outputs.body }}
        draft: false
        prerelease: false
  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        node-version: [18.x, 20.x]
        include:
          - os: macos-latest
            artifact_name: '*.dmg'
            asset_name: 'macOS-DMG'
          - os: macos-latest
            artifact_name: '*.zip'
            asset_name: 'macOS-ZIP'
          - os: ubuntu-latest
            artifact_name: '*.AppImage'
            asset_name: 'Linux-AppImage'
          - os: ubuntu-latest
            artifact_name: '*.deb'
            asset_name: 'Linux-DEB'
          - os: ubuntu-latest
            artifact_name: '*.rpm'
            asset_name: 'Linux-RPM'
          - os: windows-latest
            artifact_name: '*.exe'
            asset_name: 'Windows-EXE'
          - os: windows-latest
            artifact_name: '*.msi'
            asset_name: 'Windows-MSI'

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm ci
    - name: Build for current platform
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: npm run dist
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}-node-${{ matrix.node-version }}${{ endsWith(matrix.artifact_name, '*') && '' || matrix.artifact_name }}
        asset_content_type: application/octet-stream

  update_release:
    needs: [create_release, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Update Release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const fs = require('fs');
          const releaseId = '${{ needs.create_release.outputs.release_id }}';
          const { data: release } = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId
          });
          const body = release.body + '\n\nBuild completed successfully.';
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId,
            body: body
          });
